name: Notify

on:
  workflow_run:
    workflows: [ "pages-build-deployment" ]
    types:
      - completed
jobs:
  notify:
    if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Find the latest CI run
        uses: actions/github-script@v6
        id: find_ci_run
        with:
          script: |
            const runs = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 50,
            });
            const ciRuns = runs.data.workflow_runs
              .filter(run => run.name === "CI" && run.status === "completed" && (run.conclusion === "success" || run.conclusion === "failure"))
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            const latestCiRun = ciRuns[0];
            const runNumber = latestCiRun.run_number;
            core.setOutput("run_number", runNumber);
            core.setOutput("run_id", latestCiRun.id);
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install jq and ImageMagick
        run: |
          sudo apt-get update
          sudo apt-get install -y jq imagemagick

      - name: Fetch test results from Allure report
        run: |
          REPORT_URL="https://evgnick.github.io/JenkinsQA_2024_fall2/${{ steps.find_ci_run.outputs.run_number }}/widgets/summary.json"
          wget -q -O summary.json "$REPORT_URL"
          
          PASSED=$(jq '.statistic.passed' summary.json)
          FAILED=$(jq '.statistic.failed' summary.json)
          BROKEN=$(jq '.statistic.broken' summary.json)
          SKIPPED=$(jq '.statistic.skipped' summary.json)
          TOTAL=$(jq '.statistic.total' summary.json)
          DURATION=$(jq '.time.duration' summary.json)
          DURATION_FINAL=$(date -ud @$((DURATION / 1000)) +'%M:%S')
          
          echo "PASSED=$PASSED" >> $GITHUB_ENV
          echo "FAILED=$FAILED" >> $GITHUB_ENV
          echo "BROKEN=$BROKEN" >> $GITHUB_ENV
          echo "SKIPPED=$SKIPPED" >> $GITHUB_ENV
          echo "TOTAL=$TOTAL" >> $GITHUB_ENV
          echo "DURATION_FINAL=$DURATION_FINAL" >> $GITHUB_ENV

      - name: Debug Image File
        run: |
          ls -lah test_results.png || echo "–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!"
          file test_results.png || echo "–§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω!"

      - name: Convert image to color
        run: |
          convert test_results.png -colorspace RGB test_results_color.png

      - name: Send Telegram Notification
        run: |
          REPORT_LINK="https://evgnick.github.io/JenkinsQA_2024_fall2/${{ steps.find_ci_run.outputs.run_number }}/"
          CI_RUN_LINK="https://github.com/evgnick/JenkinsQA_2024_fall2/actions/runs/${{ steps.find_ci_run.outputs.run_id }}"
          
          TIMESTAMP=$(date +"%Y.%m.%d %H:%M:%S")
          
          ESCAPED_REPORT_LINK=$(echo "$REPORT_LINK" | sed 's|\.|\\.|g; s|-|\\-|g; s|_|\\_|g; s|:|\\:|g; s|/|\\/|g')
          ESCAPED_CI_RUN_LINK=$(echo "$CI_RUN_LINK" | sed 's|\.|\\.|g; s|-|\\-|g; s|_|\\_|g; s|:|\\:|g; s|/|\\/|g')
          ESCAPED_TIMESTAMP=$(echo "$TIMESTAMP" | sed 's|-|\\-|g')
          
          MESSAGE="üìù *–ù–æ–≤—ã–π –æ—Ç—á–µ—Ç Allure:* [–æ—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç](${ESCAPED_REPORT_LINK})%0A
          üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${ESCAPED_TIMESTAMP}%0A
          üî¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $TOTAL%0A
          ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: $PASSED%0A
          ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö: $FAILED%0A
          ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö: $BROKEN%0A
          ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: $DURATION_FINAL%0A
          üîó *–ó–∞–ø—É—Å–∫:* [–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—É—Å–∫](${ESCAPED_CI_RUN_LINK})"
          
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendPhoto" \
          -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -F photo="@test_results.png" \
          -F caption="$MESSAGE" \
          -F parse_mode="MarkdownV2"

#      - name: Send Telegram Notification
#        run: |
#          TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
#          REPORT_LINK="https://evgnick.github.io/JenkinsQA_2024_fall2/${{ steps.find_ci_run.outputs.run_number }}/"
#          CI_RUN_LINK="https://github.com/${{ github.repository }}/actions/runs/${{ steps.find_ci_run.outputs.run_id }}"
#
#          ESCAPED_TIMESTAMP=$(echo "$TIMESTAMP" | sed 's|-|\\-|g; s|:|\\:|g; s|\.|\\.|g; s|_|\\_|g; s|/|\\/|g')
#          ESCAPED_REPORT_LINK=$(echo "$REPORT_LINK" | sed 's|-|\\-|g; s|\.|\\.|g; s|_|\\_|g; s|:|\\:|g; s|/|\\/|g')
#          ESCAPED_CI_RUN_LINK=$(echo "$CI_RUN_LINK" | sed 's|-|\\-|g; s|\.|\\.|g; s|_|\\_|g; s|:|\\:|g; s|/|\\/|g')
#
#          MESSAGE="üìù –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç Allure: [–æ—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç](${ESCAPED_REPORT_LINK})%0AüìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${ESCAPED_TIMESTAMP}%0A‚öôÔ∏è –°–±–æ—Ä–∫–∞: ${{ steps.find_ci_run.outputs.run_number }}%0Aüîó –ó–∞–ø—É—Å–∫: [–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—É—Å–∫](${ESCAPED_CI_RUN_LINK})"
#
#          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
#            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
#            -d text="${MESSAGE}" \
#            -d parse_mode="MarkdownV2"

#      - name: Send Slack Notification
#        run: |
#          TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
#          REPORT_LINK="https://evgnick.github.io/JenkinsQA_2024_fall2/${{ steps.find_ci_run.outputs.run_number }}/"
#          CI_RUN_LINK="https://github.com/${{ github.repository }}/actions/runs/${{ steps.find_ci_run.outputs.run_id }}"
#
#          MESSAGE="*–ù–æ–≤—ã–π –æ—Ç—á–µ—Ç Allure*\nüìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: $TIMESTAMP\n‚öôÔ∏è *–°–±–æ—Ä–∫–∞*: ${{ steps.find_ci_run.outputs.run_number }}\nüîó *<$REPORT_LINK|–û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç>*\nüîó *<$CI_RUN_LINK|–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—É—Å–∫>*"
#
#          curl -X POST -H 'Content-type: application/json' \
#            --data "{\"text\": \"$MESSAGE\"}" \
#            ${{ secrets.SLACK_WEBHOOK_URL }}
