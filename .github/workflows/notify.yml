name: Notify

on:
  workflow_run:
    workflows: [ "pages-build-deployment" ]
    types:
      - completed
jobs:
  notify:
    if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Find the latest CI run
        uses: actions/github-script@v6
        id: find_ci_run
        with:
          script: |
            const runs = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 50,
            });
            const ciRuns = runs.data.workflow_runs
              .filter(run => run.name === "CI" && run.status === "completed" && (run.conclusion === "success" || run.conclusion === "failure"))
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            const latestCiRun = ciRuns[0];
            const runNumber = latestCiRun.run_number;
            core.setOutput("run_number", runNumber);
            core.setOutput("run_id", latestCiRun.id);
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y gnuplot jq

      - name: Fetch test results from Allure report
        run: |
          REPORT_URL="https://evgnick.github.io/JenkinsQA_2024_fall2/${{ steps.find_ci_run.outputs.run_number }}/widgets/summary.json"
          wget -q -O summary.json "$REPORT_URL"

          PASSED=$(jq '.statistic.passed' summary.json)
          FAILED=$(jq '.statistic.failed' summary.json)
          BROKEN=$(jq '.statistic.broken' summary.json)
          SKIPPED=$(jq '.statistic.skipped' summary.json)
          TOTAL=$(jq '.statistic.total' summary.json)
          DURATION=$(jq '.time.duration' summary.json)
          DURATION_FINAL=$(date -ud @$((DURATION / 1000)) +'%M:%S')

          echo "PASSED=$PASSED" >> $GITHUB_ENV
          echo "FAILED=$FAILED" >> $GITHUB_ENV
          echo "BROKEN=$BROKEN" >> $GITHUB_ENV
          echo "SKIPPED=$SKIPPED" >> $GITHUB_ENV
          echo "TOTAL=$TOTAL" >> $GITHUB_ENV
          echo "DURATION_FINAL=$DURATION_FINAL" >> $GITHUB_ENV

#      - name: Generate test results pie chart
#        run: |
#          echo "$PASSED Passed" > results.dat
#          echo "$FAILED Failed" >> results.dat
#          echo "$BROKEN Broken" >> results.dat
#          echo "$SKIPPED Skipped" >> results.dat
#
#          gnuplot -e "
#          set terminal pngcairo enhanced size 600,400;
#          set output 'test_results_pie_chart.png';
#          set title 'Allure Test Results';
#          set style fill solid 1.0 border -1;
#          set datafile separator space;
#          set key off;
#          set style data histograms;
#          set style histogram rowstacked;
#          set style fill solid border -1;
#          set xtics rotate by -45;
#          plot 'results.dat' using 1:xtic(2) with boxes lc rgb 'green', \
#               '' using 1:xtic(2) with boxes lc rgb 'red', \
#               '' using 1:xtic(2) with boxes lc rgb 'orange', \
#               '' using 1:xtic(2) with boxes lc rgb 'blue';
#          "

      - name: Generate test results pie chart
        run: |
          echo "$PASSED Passed" > results.dat
          echo "$FAILED Failed" >> results.dat
          echo "$BROKEN Broken" >> results.dat
          echo "$SKIPPED Skipped" >> results.dat

          gnuplot -persist <<-EOF
            set terminal pngcairo enhanced size 600,400
            set output 'test_results_pie_chart.png'
            set title 'Allure Test Results'
            unset key
            unset border
            unset tics
            set size square
          
            datafile = 'results.dat'
            total = `awk '{sum += \$1} END {print sum}' results.dat`
            start_angle = 0
            colors = "green red orange blue"
            i = 0
          
            plot for [row=0:3] datafile using (start_angle):(start_angle=start_angle+360.*column(1)/total):(360.*column(1)/total) \
              with circles lc rgb word(colors, row+1) fs solid border -1
          
            start_angle = 0
            do for [row=0:3] {
              set label row+1 word("Passed Failed Broken Skipped", row+1) \
                at first (0.7*cos(start_angle+180.*column(row+1)/total)), (0.7*sin(start_angle+180.*column(row+1)/total)) \
                tc rgb word(colors, row+1) font ",10"
              start_angle = start_angle + 360.*column(row+1)/total
            }
          EOF


      - name: Send Telegram Notification
        run: |
          REPORT_LINK="https://evgnick.github.io/JenkinsQA_2024_fall2/${{ steps.find_ci_run.outputs.run_number }}/"
          CI_RUN_LINK="https://github.com/evgnick/JenkinsQA_2024_fall2/actions/runs/${{ steps.find_ci_run.outputs.run_id }}"
          
          TIMESTAMP=$(date +"%Y.%m.%d %H:%M:%S")
          
          ESCAPED_REPORT_LINK=$(echo "$REPORT_LINK" | sed 's|\.|\\.|g; s|-|\\-|g; s|_|\\_|g; s|:|\\:|g; s|/|\\/|g')
          ESCAPED_CI_RUN_LINK=$(echo "$CI_RUN_LINK" | sed 's|\.|\\.|g; s|-|\\-|g; s|_|\\_|g; s|:|\\:|g; s|/|\\/|g')
          ESCAPED_TIMESTAMP=$(echo "$TIMESTAMP" | sed 's|-|\\-|g; s|\.|\\.|g')
          
          MESSAGE="📝 Отчет: [открыть](${ESCAPED_REPORT_LINK})
          📅 Дата и время: ${ESCAPED_TIMESTAMP}
          🔢 Всего тестов: $TOTAL
          ✅ Успешных: $PASSED
          ❌ Проваленных: $FAILED
          ⚠️ Проблемных: $BROKEN
          ⏸️ Пропущенных: $SKIPPED
          ⏱️ Время выполнения: $DURATION_FINAL
          🔗 Запуск: [посмотреть](${ESCAPED_CI_RUN_LINK})"
          
          ESCAPED_MESSAGE=$(echo "$MESSAGE" | sed 's|*|\\*|g; s|_|\\_|g; s|~|\\~|g')
          
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendPhoto" \
          -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -F photo="@test_results_pie_chart.png" \
          -F caption="$ESCAPED_MESSAGE" \
          -F parse_mode="MarkdownV2"

#      - name: Send Telegram Notification
#        run: |
#          TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
#          REPORT_LINK="https://evgnick.github.io/JenkinsQA_2024_fall2/${{ steps.find_ci_run.outputs.run_number }}/"
#          CI_RUN_LINK="https://github.com/${{ github.repository }}/actions/runs/${{ steps.find_ci_run.outputs.run_id }}"
#
#          ESCAPED_TIMESTAMP=$(echo "$TIMESTAMP" | sed 's|-|\\-|g; s|:|\\:|g; s|\.|\\.|g; s|_|\\_|g; s|/|\\/|g')
#          ESCAPED_REPORT_LINK=$(echo "$REPORT_LINK" | sed 's|-|\\-|g; s|\.|\\.|g; s|_|\\_|g; s|:|\\:|g; s|/|\\/|g')
#          ESCAPED_CI_RUN_LINK=$(echo "$CI_RUN_LINK" | sed 's|-|\\-|g; s|\.|\\.|g; s|_|\\_|g; s|:|\\:|g; s|/|\\/|g')
#
#          MESSAGE="📝 Новый отчет Allure: [открыть отчет](${ESCAPED_REPORT_LINK})%0A📅 Дата и время: ${ESCAPED_TIMESTAMP}%0A⚙️ Сборка: ${{ steps.find_ci_run.outputs.run_number }}%0A🔗 Запуск: [посмотреть запуск](${ESCAPED_CI_RUN_LINK})"
#
#          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
#            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
#            -d text="${MESSAGE}" \
#            -d parse_mode="MarkdownV2"

#      - name: Send Slack Notification
#        run: |
#          TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
#          REPORT_LINK="https://evgnick.github.io/JenkinsQA_2024_fall2/${{ steps.find_ci_run.outputs.run_number }}/"
#          CI_RUN_LINK="https://github.com/${{ github.repository }}/actions/runs/${{ steps.find_ci_run.outputs.run_id }}"
#
#          MESSAGE="*Новый отчет Allure*\n📅 *Дата и время*: $TIMESTAMP\n⚙️ *Сборка*: ${{ steps.find_ci_run.outputs.run_number }}\n🔗 *<$REPORT_LINK|Открыть отчет>*\n🔗 *<$CI_RUN_LINK|Посмотреть запуск>*"
#
#          curl -X POST -H 'Content-type: application/json' \
#            --data "{\"text\": \"$MESSAGE\"}" \
#            ${{ secrets.SLACK_WEBHOOK_URL }}
