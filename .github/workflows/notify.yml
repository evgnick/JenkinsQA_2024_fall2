name: Notify

on:
  workflow_run:
    workflows: [ "pages-build-deployment" ]
    types:
      - completed
jobs:
  notify:
    if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Find the latest CI run
        uses: actions/github-script@v6
        id: find_ci_run
        with:
          script: |
            const runs = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 50,
            });
            const ciRuns = runs.data.workflow_runs
              .filter(run => run.name === "CI")
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            const latestCiRun = ciRuns[0];
            core.setOutput("run_id", latestCiRun.id);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º PR –ø–æ –∫–æ–º–º–∏—Ç—É
            const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: commitSHA
            });
            
            let prUser = 'unknown';
            if (prs.data.length > 0) {
              // –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞ PR
              const pr = prs.data[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π PR, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ
              prUser = pr.user.login;
              }
            
            core.setOutput("pr_user", prUser);
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download run_number artifact from CI workflow
        uses: actions/download-artifact@v4
        with:
          name: my_artifact
          run-id: ${{ steps.find_ci_run.outputs.run_id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Read run_number from artifact
        run: |
          RUN_NUMBER=$(cat run_number.txt)
          echo "RUN_NUMBER=${RUN_NUMBER}" >> $GITHUB_ENV
          echo "Run Number: $RUN_NUMBER"

      - name: Send Telegram Notification
        run: |
          TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
          REPORT_LINK="https://evgnick.github.io/JenkinsQA_2024_fall2/$RUN_NUMBER/"
          
          ESCAPED_TIMESTAMP=$(echo "$TIMESTAMP" | sed 's|-|\\-|g; s|:|\\:|g; s|\.|\\.|g; s|_|\\_|g; s|/|\\/|g')
          ESCAPED_REPORT_LINK=$(echo "$REPORT_LINK" | sed 's|-|\\-|g; s|\.|\\.|g; s|_|\\_|g; s|:|\\:|g; s|/|\\/|g')
          
          PR_USER="${{ steps.find_ci_run.outputs.pr_user }}"
          
          MESSAGE="üìù –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç Allure: [–æ—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç](${ESCAPED_REPORT_LINK})%0AüìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${ESCAPED_TIMESTAMP}%0A‚öôÔ∏è –°–±–æ—Ä–∫–∞: $RUN_NUMBER%0Aüë§ –ê–≤—Ç–æ—Ä: [${PR_USER}](https://github.com/${PR_USER})"
          
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d text="${MESSAGE}" \
            -d parse_mode="MarkdownV2"