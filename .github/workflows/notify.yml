name: Notify

on:
  workflow_run:
    workflows: [ "pages-build-deployment" ]
    types:
      - completed
jobs:
  notify:
    if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Find the latest CI run
        uses: actions/github-script@v6
        id: find_ci_run
        with:
          script: |
            const runs = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 50,
            });
            const ciRuns = runs.data.workflow_runs
              .filter(run => run.name === "CI" && run.status === "completed" && (run.conclusion === "success" || run.conclusion === "failure"))
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            const latestCiRun = ciRuns[0];
            const runNumber = latestCiRun.run_number;
            core.setOutput("run_number", runNumber);
            core.setOutput("run_id", latestCiRun.id);
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: pip install matplotlib requests

      - name: Fetch test results from Allure report
        run: |
          REPORT_URL="https://evgnick.github.io/JenkinsQA_2024_fall2/${{ steps.find_ci_run.outputs.run_number }}/widgets/summary.json"
          
          wget -q -O summary.json "$REPORT_URL" || { echo "Failed to download report"; exit 1; }
          
          PASSED=$(jq '.statistic.passed' summary.json || echo "0")
          FAILED=$(jq '.statistic.failed' summary.json || echo "0")
          BROKEN=$(jq '.statistic.broken' summary.json || echo "0")
          SKIPPED=$(jq '.statistic.skipped' summary.json || echo "0")
          TOTAL=$(jq '.statistic.total' summary.json || echo "0")
          DURATION=$(jq '.time.duration' summary.json || echo "0")
          DURATION_FINAL=$(date -ud @$((DURATION / 1000)) +'%M:%S')
          
          echo "PASSED=$PASSED" >> $GITHUB_ENV
          echo "FAILED=$FAILED" >> $GITHUB_ENV
          echo "BROKEN=$BROKEN" >> $GITHUB_ENV
          echo "SKIPPED=$SKIPPED" >> $GITHUB_ENV
          echo "TOTAL=$TOTAL" >> $GITHUB_ENV
          echo "DURATION_FINAL=$DURATION_FINAL" >> $GITHUB_ENV

      - name: Generate test results donut chart
        run: |
          python -c "
          import matplotlib.pyplot as plt
          import os
          
          passed = int(os.getenv('PASSED', 0))
          failed = int(os.getenv('FAILED', 0))
          broken = int(os.getenv('BROKEN', 0))
          skipped = int(os.getenv('SKIPPED', 0))
          
          labels = ['Passed', 'Failed', 'Broken', 'Skipped']
          values = [passed, failed, broken, skipped]
          colors = ['#8BC34A', '#F44336', '#FF9800', '#2196F3']
          
          fig, ax = plt.subplots(figsize=(5, 5))  # Reduce figure size
          wedges, texts, autotexts = ax.pie(
          values, labels=None, autopct='%1.0f%%', colors=colors,
          startangle=90, wedgeprops={'edgecolor': 'white', 'linewidth': 2}, pctdistance=0.85,
          )
          
          for autotext in autotexts:
            autotext.set_fontsize(8)
          
          # Adding the center circle to create the 'donut' effect
          centre_circle = plt.Circle((0, 0), 0.60, fc='white')
          fig.gca().add_artist(centre_circle)
          
          # Add the total number of tests in the center
          ax.text(0, 0, str(sum(values)), ha='center', va='center', fontsize=16, fontweight='bold')
          
          text_x_pos = 1.5  # –ü–æ–∑–∏—Ü–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –ø–æ –æ—Å–∏ X
          text_y_pos = 0.6  # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –ø–æ –æ—Å–∏ Y
          
          # Add labels with the count and category to the side
          ax.add_patch(plt.Rectangle((text_x_pos, text_y_pos), 0.1, 0.1, color='#8BC34A'))
          ax.text(text_x_pos + 0.12, text_y_pos, f'Passed: {passed}', fontsize=12, ha='left', va='center', color='black')
      
          ax.add_patch(plt.Rectangle((text_x_pos, text_y_pos - 0.2), 0.1, 0.1, color='#F44336'))
          ax.text(text_x_pos + 0.12, text_y_pos - 0.2, f'Failed: {failed}', fontsize=12, ha='left', va='center', color='black')
      
          ax.add_patch(plt.Rectangle((text_x_pos, text_y_pos - 0.4), 0.1, 0.1, color='#FF9800'))
          ax.text(text_x_pos + 0.12, text_y_pos - 0.4, f'Broken: {broken}', fontsize=12, ha='left', va='center', color='black')
      
          ax.add_patch(plt.Rectangle((text_x_pos, text_y_pos - 0.6), 0.1, 0.1, color='#2196F3'))
          ax.text(text_x_pos + 0.12, text_y_pos - 0.6, f'Skipped: {skipped}', fontsize=12, ha='left', va='center', color='black')
      

      # Save the figure with tight layout to reduce white space
          plt.savefig('test_results_donut_chart.png', dpi=300, bbox_inches='tight', pad_inches=0.01)
          "

      - name: Send Telegram Notification
        run: |
          REPORT_LINK="https://evgnick.github.io/JenkinsQA_2024_fall2/${{ steps.find_ci_run.outputs.run_number }}/"
          CI_RUN_LINK="https://github.com/evgnick/JenkinsQA_2024_fall2/actions/runs/${{ steps.find_ci_run.outputs.run_id }}"
          
          TIMESTAMP=$(date +"%Y.%m.%d %H:%M:%S")
          
          ESCAPED_REPORT_LINK=$(echo "$REPORT_LINK" | sed 's|\.|\\.|g; s|-|\\-|g; s|_|\\_|g; s|:|\\:|g; s|/|\\/|g')
          ESCAPED_CI_RUN_LINK=$(echo "$CI_RUN_LINK" | sed 's|\.|\\.|g; s|-|\\-|g; s|_|\\_|g; s|:|\\:|g; s|/|\\/|g')
          ESCAPED_TIMESTAMP=$(echo "$TIMESTAMP" | sed 's|-|\\-|g; s|\.|\\.|g')
          
          MESSAGE="üî¢ Total tests: $TOTAL
          üü© Passed: $PASSED
          üü• Failed: $FAILED
          üüß Broken: $BROKEN
          üü¶ Skipped: $SKIPPED
          üìù Report: [open](${ESCAPED_REPORT_LINK})
          üìÖ Data / time: ${ESCAPED_TIMESTAMP}
          ‚è±Ô∏è Execution time: $DURATION_FINAL
          üîó Run: [see](${ESCAPED_CI_RUN_LINK})"
          
          ESCAPED_MESSAGE=$(echo "$MESSAGE" | sed 's|*|\\*|g; s|_|\\_|g; s|~|\\~|g')
          
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendPhoto" \
          -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -F photo="@test_results_donut_chart.png" \
          -F caption="$ESCAPED_MESSAGE" \
          -F parse_mode="MarkdownV2"

#      - name: Send Telegram Notification
#        run: |
#          TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
#          REPORT_LINK="https://evgnick.github.io/JenkinsQA_2024_fall2/${{ steps.find_ci_run.outputs.run_number }}/"
#          CI_RUN_LINK="https://github.com/${{ github.repository }}/actions/runs/${{ steps.find_ci_run.outputs.run_id }}"
#
#          ESCAPED_TIMESTAMP=$(echo "$TIMESTAMP" | sed 's|-|\\-|g; s|:|\\:|g; s|\.|\\.|g; s|_|\\_|g; s|/|\\/|g')
#          ESCAPED_REPORT_LINK=$(echo "$REPORT_LINK" | sed 's|-|\\-|g; s|\.|\\.|g; s|_|\\_|g; s|:|\\:|g; s|/|\\/|g')
#          ESCAPED_CI_RUN_LINK=$(echo "$CI_RUN_LINK" | sed 's|-|\\-|g; s|\.|\\.|g; s|_|\\_|g; s|:|\\:|g; s|/|\\/|g')
#
#          MESSAGE="üìù –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç Allure: [–æ—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç](${ESCAPED_REPORT_LINK})%0AüìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${ESCAPED_TIMESTAMP}%0A‚öôÔ∏è –°–±–æ—Ä–∫–∞: ${{ steps.find_ci_run.outputs.run_number }}%0Aüîó –ó–∞–ø—É—Å–∫: [–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—É—Å–∫](${ESCAPED_CI_RUN_LINK})"
#
#          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
#            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
#            -d text="${MESSAGE}" \
#            -d parse_mode="MarkdownV2"

#      - name: Send Slack Notification
#        run: |
#          TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
#          REPORT_LINK="https://evgnick.github.io/JenkinsQA_2024_fall2/${{ steps.find_ci_run.outputs.run_number }}/"
#          CI_RUN_LINK="https://github.com/${{ github.repository }}/actions/runs/${{ steps.find_ci_run.outputs.run_id }}"
#
#          MESSAGE="*–ù–æ–≤—ã–π –æ—Ç—á–µ—Ç Allure*\nüìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: $TIMESTAMP\n‚öôÔ∏è *–°–±–æ—Ä–∫–∞*: ${{ steps.find_ci_run.outputs.run_number }}\nüîó *<$REPORT_LINK|–û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç>*\nüîó *<$CI_RUN_LINK|–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—É—Å–∫>*"
#
#          curl -X POST -H 'Content-type: application/json' \
#            --data "{\"text\": \"$MESSAGE\"}" \
#            ${{ secrets.SLACK_WEBHOOK_URL }}
