name: Notify

on:
  workflow_run:
    workflows: [ "pages-build-deployment" ]
    types:
      - completed
jobs:
  notify:
    if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Find the latest CI run
        uses: actions/github-script@v6
        id: find_ci_run
        with:
          script: |
            const runs = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 50,
            });
            const ciRuns = runs.data.workflow_runs
              .filter(run => run.name === "CI" && run.status === "completed" && (run.conclusion === "success" || run.conclusion === "failure"))
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            const latestCiRun = ciRuns[0];
            const runNumber = latestCiRun.run_number;
            core.setOutput("run_number", runNumber);
            core.setOutput("run_id", latestCiRun.id);
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: pip install matplotlib requests

      - name: Fetch test results from Allure report
        run: |
          REPORT_URL="https://evgnick.github.io/JenkinsQA_2024_fall2/${{ steps.find_ci_run.outputs.run_number }}/widgets/summary.json"
          
          wget -q -O summary.json "$REPORT_URL" || { echo "Failed to download report"; exit 1; }
          
          PASSED=$(jq '.statistic.passed' summary.json || echo "0")
          FAILED=$(jq '.statistic.failed' summary.json || echo "0")
          BROKEN=$(jq '.statistic.broken' summary.json || echo "0")
          SKIPPED=$(jq '.statistic.skipped' summary.json || echo "0")
          TOTAL=$(jq '.statistic.total' summary.json || echo "0")
          DURATION=$(jq '.time.duration' summary.json || echo "0")
          DURATION_FINAL=$(date -ud @$((DURATION / 1000)) +'%M:%S')
          
          echo "PASSED=$PASSED" >> $GITHUB_ENV
          echo "FAILED=$FAILED" >> $GITHUB_ENV
          echo "BROKEN=$BROKEN" >> $GITHUB_ENV
          echo "SKIPPED=$SKIPPED" >> $GITHUB_ENV
          echo "TOTAL=$TOTAL" >> $GITHUB_ENV
          echo "DURATION_FINAL=$DURATION_FINAL" >> $GITHUB_ENV

      - name: Generate test results donut chart
        run: |
          python -c "
          import matplotlib.pyplot as plt
          import os
          from matplotlib import patches  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
          
          passed = int(os.getenv('PASSED', 0))
          failed = int(os.getenv('FAILED', 0))
          broken = int(os.getenv('BROKEN', 0))
          skipped = int(os.getenv('SKIPPED', 0))
          
          labels = ['Passed', 'Failed', 'Broken', 'Skipped']
          values = [passed, failed, broken, skipped]
          colors = ['#8BC34A', '#F44336', '#FF9800', '#2196F3']
          
          fig, ax = plt.subplots(figsize=(3, 2))  # –£–º–µ–Ω—å—à–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
          wedges, texts, autotexts = ax.pie(
              values, labels=None, autopct='%1.0f%%', colors=colors,
              startangle=90, wedgeprops={'edgecolor': 'white', 'linewidth': 2}, pctdistance=0.85,
          )
          
          for autotext in autotexts:
              autotext.set_fontsize(8)
          
          # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –∫—Ä—É–≥–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ "–ø–æ–Ω—á–∏–∫–∞"
          centre_circle = plt.Circle((0, 0), 0.60, fc='white')
          fig.gca().add_artist(centre_circle)
          
          # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –≤ —Ü–µ–Ω—Ç—Ä–µ –¥–∏–∞–≥—Ä–∞–º–º—ã
          ax.text(0, 0, str(sum(values)), ha='center', va='center', fontsize=14, fontweight='bold')
          
          # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É —Å–±–æ–∫—É –≤ –≤–∏–¥–µ —Ü–≤–µ—Ç–Ω—ã—Ö –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–æ–≤ –∏ —Ç–µ–∫—Å—Ç–∞
          legend_x = 1.2
          legend_y = 0.2
          plt.gca().set_position([0, 0, 0.75, 1])  # –°–º–µ—â–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –≤–ª–µ–≤–æ
          for i, (label, color, value) in enumerate(zip(labels, colors, values)):
              plt.gcf().text(
                  legend_x, legend_y - i * 0.15,
                  f'{label}: {value}',
                  color='black', fontsize=10, fontweight='bold',
                  bbox=dict(facecolor='white', edgecolor='white', boxstyle='square,pad=0.3')
              )
              # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–Ω–æ–π –∫–≤–∞–¥—Ä–∞—Ç –ø–µ—Ä–µ–¥ —Ç–µ–∫—Å—Ç–æ–º
              rect = patches.Rectangle(
                  (legend_x - 0.05, legend_y - i * 0.15 - 0.02),
                  0.03, 0.03, color=color, transform=plt.gcf().transFigure, clip_on=False
              )
              plt.gcf().add_artist(rect)
          
          # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
          plt.savefig('test_results_donut_chart.png', dpi=250, bbox_inches='tight', pad_inches=0.05)
          "

      - name: Send Telegram Notification
        run: |
          REPORT_LINK="https://evgnick.github.io/JenkinsQA_2024_fall2/${{ steps.find_ci_run.outputs.run_number }}/"
          CI_RUN_LINK="https://github.com/evgnick/JenkinsQA_2024_fall2/actions/runs/${{ steps.find_ci_run.outputs.run_id }}"
          
          TIMESTAMP=$(date +"%Y.%m.%d %H:%M:%S")
          
          ESCAPED_REPORT_LINK=$(echo "$REPORT_LINK" | sed 's|\.|\\.|g; s|-|\\-|g; s|_|\\_|g; s|:|\\:|g; s|/|\\/|g')
          ESCAPED_CI_RUN_LINK=$(echo "$CI_RUN_LINK" | sed 's|\.|\\.|g; s|-|\\-|g; s|_|\\_|g; s|:|\\:|g; s|/|\\/|g')
          ESCAPED_TIMESTAMP=$(echo "$TIMESTAMP" | sed 's|-|\\-|g; s|\.|\\.|g')
          
          MESSAGE="üî¢ Total tests: $TOTAL
          üü© Passed: $PASSED
          üü• Failed: $FAILED
          üüß Broken: $BROKEN
          üü¶ Skipped: $SKIPPED
          üìù Report: [open](${ESCAPED_REPORT_LINK})
          üìÖ Data / time: ${ESCAPED_TIMESTAMP}
          ‚è±Ô∏è Execution time: $DURATION_FINAL
          üîó Run: [see](${ESCAPED_CI_RUN_LINK})"
          
          ESCAPED_MESSAGE=$(echo "$MESSAGE" | sed 's|*|\\*|g; s|_|\\_|g; s|~|\\~|g')
          
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendPhoto" \
          -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -F photo="@test_results_donut_chart.png" \
          -F caption="$ESCAPED_MESSAGE" \
          -F parse_mode="MarkdownV2"

#      - name: Send Telegram Notification
#        run: |
#          TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
#          REPORT_LINK="https://evgnick.github.io/JenkinsQA_2024_fall2/${{ steps.find_ci_run.outputs.run_number }}/"
#          CI_RUN_LINK="https://github.com/${{ github.repository }}/actions/runs/${{ steps.find_ci_run.outputs.run_id }}"
#
#          ESCAPED_TIMESTAMP=$(echo "$TIMESTAMP" | sed 's|-|\\-|g; s|:|\\:|g; s|\.|\\.|g; s|_|\\_|g; s|/|\\/|g')
#          ESCAPED_REPORT_LINK=$(echo "$REPORT_LINK" | sed 's|-|\\-|g; s|\.|\\.|g; s|_|\\_|g; s|:|\\:|g; s|/|\\/|g')
#          ESCAPED_CI_RUN_LINK=$(echo "$CI_RUN_LINK" | sed 's|-|\\-|g; s|\.|\\.|g; s|_|\\_|g; s|:|\\:|g; s|/|\\/|g')
#
#          MESSAGE="üìù –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç Allure: [–æ—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç](${ESCAPED_REPORT_LINK})%0AüìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${ESCAPED_TIMESTAMP}%0A‚öôÔ∏è –°–±–æ—Ä–∫–∞: ${{ steps.find_ci_run.outputs.run_number }}%0Aüîó –ó–∞–ø—É—Å–∫: [–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—É—Å–∫](${ESCAPED_CI_RUN_LINK})"
#
#          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
#            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
#            -d text="${MESSAGE}" \
#            -d parse_mode="MarkdownV2"

#      - name: Send Slack Notification
#        run: |
#          TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
#          REPORT_LINK="https://evgnick.github.io/JenkinsQA_2024_fall2/${{ steps.find_ci_run.outputs.run_number }}/"
#          CI_RUN_LINK="https://github.com/${{ github.repository }}/actions/runs/${{ steps.find_ci_run.outputs.run_id }}"
#
#          MESSAGE="*–ù–æ–≤—ã–π –æ—Ç—á–µ—Ç Allure*\nüìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: $TIMESTAMP\n‚öôÔ∏è *–°–±–æ—Ä–∫–∞*: ${{ steps.find_ci_run.outputs.run_number }}\nüîó *<$REPORT_LINK|–û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç>*\nüîó *<$CI_RUN_LINK|–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—É—Å–∫>*"
#
#          curl -X POST -H 'Content-type: application/json' \
#            --data "{\"text\": \"$MESSAGE\"}" \
#            ${{ secrets.SLACK_WEBHOOK_URL }}
